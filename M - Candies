#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define rep(i, st, ed) for (int i = st; i < ed; i++)

// Sub Problem:
// - solve the problem in brute force
// - then visualize the repeatative things
// - make optimization

void solve()
{
    long long int n, k;
    cin >> n >> k;
    long long int mod = 1e9 + 7;
    vector<long long int> v(n);
    rep(i, 0, n) cin >> v[i];
    vector<vector<long long int>> dp(n + 1, vector<long long int>(k + 1, 0));
    vector<vector<long long int>> dpSum(n + 1, vector<long long int>(k + 1, 0));

    for (int i = 0; i <= n; i++)
    {
        dp[i][0] = 1;
        dpSum[i][0] = 1;
    }
    for (int j = 1; j <= k; j++)
    {
        dpSum[0][j] = 1;
    }

    for (long long int i = 1; i <= n; i++)
    {
        for (long long int j = 1; j <= k; j++)
        {
            // int r=0;
            // for(int z=0;z<=min(v[i-1],j);z++)
            //     r+=dp[i-1][j-z];
            // dp[i][j]=r;
            // r-> dp[i-1][j]+dp[i-1][j-1]+...+ dp[i-1][j- __ ]
            long long int subtractor = (j - min(v[i - 1], j) - 1) >= 0 ? dpSum[i - 1][j - min(v[i - 1], j) - 1] : 0;

            dp[i][j] = (dpSum[i - 1][j] - subtractor + mod) % mod;

            dp[i][j] %= mod; // Take mod after adjustment

            dpSum[i][j] = (dpSum[i][j - 1] % mod + dp[i][j] % mod) % mod;
        }
    }
    cout << dp[n][k] << endl;
}

int main()
{
    int tc = 1;
    // cin >> tc;
    while (tc--)
    {
        solve();
    }
}
